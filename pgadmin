=========================================================================
                         server_image_lookup.py
=========================================================================

import sys
import os
from contextlib import redirect_stdout
from common import logger, sgcloud

def get_ocs_image_name(server_name):
    # Initialize the SG Cloud client with environment variables
    sg_cloud_client = sgcloud.Client(
        os.environ['ACCOUNT_ID'],
        os.environ['CLIENT_ID'],
        os.environ['CLIENT_SECRET']
    )

    # Redirect stdout to /dev/null to suppress unwanted output
    with open(os.devnull, 'w') as devnull:
        with redirect_stdout(devnull):
            # Get the image ID of the server
            image_id = sg_cloud_client.get_image_id_from_server(server_name)

            # Get the image name using the image ID
            image_name = sg_cloud_client.get_image_details(image_id)

    # Output the image name via stdout
    print(image_name)

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <server_name>")
        sys.exit(1)

    server_name = sys.argv[1]
    get_ocs_image_name(server_name)

if __name__ == "__main__":
    main()


=========================================================================
                                Functions
=========================================================================

    def get_image_id_from_server(self, server_name: str):
            access_token = self.get_iam_token(["ccs:read:all"])
            res = http_client.get(
                f"{OCS_SERVERS_ENDPOINT}/detail",
                params={"status": "ACTIVE", "name": server_name},
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {access_token}"
                }
            )

            if res.status_code == 200:
                servers = res.json().get('servers', [])
                if servers and 'image' in servers[0]: 
                    return servers[0]['image']['id']
                else:
                    raise Exception(f"No active server found with name {server_name}")
            else:
                raise Exception(f"Failed to retrieve server details: {res.status_code} {res.text}")

    def get_image_details(self, image_id: str) -> str:
        """
        Retrieves the name of an image using its ID.
        """
        access_token = self.get_iam_token(["osf:read"])
        res = http_client.get(
            f"{OCS_IMAGES_ENDPOINT}/{image_id}",
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }
        )

        if res.status_code == 200:
            # Extract the image name from the response
            image_name = res.json().get("image", {}).get("name")
            if image_name:
                return image_name
            else:
                raise Exception("Image name not found in the response")
        else:
            raise Exception(f"Failed to retrieve image details: {res.status_code} {res.text}")

