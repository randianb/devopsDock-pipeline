import time
import sys
from common import logger, sgcloud
import os
from contextlib import redirect_stdout


class SGCloudClient:
    def get_iam_token(self, scopes):
        # Placeholder function to get IAM token. Replace with actual logic
        return "dummy_token"

    def get_images(self, retry=3, region="paris"):
        access_token = self.get_iam_token(["osf:read"])
        res = http_client.get(
            OCS_IMAGES_ENDPOINT.replace("#region#", region),
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }
        )

        images = []
        data = res.json()

        if 'images' not in data and retry > 0:
            time.sleep(2)
            return self.get_images(retry=retry - 1)

        if 'images' not in data:
            logger.error(res.text)
            raise Exception("Failed to retrieve images")

        data = data['images']

        for image in data:
            # select only RHEL 9
            if image['status'].lower() == 'created' and "rhel_9" in image['name'].lower():
                images.append(image['name'])
            else:
                logger.debug("Skipping image %s" % image['status'])

        # Print the list of all images in the region
        print(f"Images available in region {region}: {images}")
        return images

    def get_latest_image(self, region):
        logger.debug(f"Getting the latest image for {region}")
        images = self.get_images(region=region)

        if not images:
            logger.error(f"No images found for {region}")
            return None

        latest_image = images[0]  # Assume the first image is the latest one
        print(f"Latest image in {region}: {latest_image}")  # Print the latest image
        return latest_image


def get_latest_os_image(region="paris"):
    sg_cloud_client = sgcloud.Client(os.environ['ACCOUNT_ID'], os.environ['CLIENT_ID'], os.environ['CLIENT_SECRET'])
    
    # Redirect stdout to /dev/null to suppress unwanted output
    with open(os.devnull, 'w') as devnull:
        with redirect_stdout(devnull):
            latest_image = sg_cloud_client.get_latest_image(region=region)
    
    # Send the latest image name via stdout
    print(f"Latest image for region {region}: {latest_image}")


def main():
    region = sys.argv[1]
    regions = region.split(",") if "," in region else [region]

    for region in regions:
        print(f"+++++++++++++++++++++++ [{region}] +++++++++++++++++++++++")
        get_latest_os_image(region.strip())  # Get and print latest image


if __name__ == "__main__":
    main()