def get_server_image_ids(self, server_name, region, retry=3):
    access_token = self.get_iam_token(["ccs:read"])

    endpoint = OCS_SERVERS_ENDPOINT_DETAILS.replace("#region#", region)
    url = f"{endpoint}?status=ACTIVE&name={server_name}"

    res = http_client.get(
        url,
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {access_token}"
        }
    )

    if res.status_code != 200 and retry > 0:
        logger.warning(f"Retrying API request, attempts left: {retry}")
        time.sleep(2)
        return self.get_server_image_ids(server_name, region, retry - 1)

    if res.status_code != 200:
        logger.error(f"Failed to retrieve server details: {res.text}")
        raise Exception("Failed to retrieve server details")

    data = res.json()
    logger.debug(f"API Response: {data}")

    if "servers" not in data or not data["servers"]:
        logger.error(f"No servers found for {server_name}")
        raise Exception(f"No servers found for name: {server_name}")

    image_map = {}  # Dictionary to map server names to image IDs
    for server in data["servers"]:
        if "image" in server:
            image_id = server["image"]["id"]
            image_map[server["name"]] = image_id  # Store server name and image ID
            logger.debug(f"Server {server['name']} has image ID: {image_id}")
        else:
            logger.error(f"Image ID not found for server: {server['name']}")

    return image_map  # Return dictionary of server_name -> image_id