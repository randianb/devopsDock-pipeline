#!/bin/bash

# SMTP Configuration
SMTP_HOST="smtp-goss.int.world.socgen"
SMTP_PORT=25
MAIL_FROM="devops.monitoring@socgen.com"
MAIL_TO="anouar.harrou@socgen.com"

# Read server details
server_name="$1"
account="$2"
mismatch_details="$3"

# Define paths
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
GENERATE_EXCEL_SCRIPT="${SCRIPT_DIR}/generate_excel.py"

# Call Python script to generate the Excel file
echo "üìù Generating Excel report..."
excel_file=$(python3 "$GENERATE_EXCEL_SCRIPT" "$server_name" "$account" "$mismatch_details" "Mismatch Found")

if [ $? -ne 0 ]; then
    echo "‚ùå ERROR: Excel file generation failed!"
    exit 1
else
    echo "‚úÖ Excel report generated: $excel_file"
fi

# Email subject
subject="üö® Critical Alert: Image Mismatch on ${server_name} (Account: ${account})"

# Email body (HTML)
email_body="<html>
<body style='font-family:Arial, sans-serif; background-color:#f4f4f4; padding:20px;'>
    <div style='max-width:600px; margin:auto; background:#ffffff; padding:20px; border-radius:8px; box-shadow:0 0 10px rgba(0,0,0,0.1);'>
        <h2 style='color:#d9534f; text-align:center;'>üö® Image Mismatch Detected</h2>
        <p style='font-size:14px; text-align:center;'>An inconsistency has been detected in the image versions on the specified server.</p>
        <hr style='border:0; height:1px; background:#ddd;'>
        <table style='width:100%; font-size:16px; margin-bottom:20px;'>
            <tr><td style='color:#0275d8; font-weight:bold;'>üë§ Account: ${account}</td></tr>
            <tr><td style='color:#0275d8; font-weight:bold;'>üñ•Ô∏è Server: ${server_name}</td></tr>
        </table>
        <h3 style='color:#d9534f;'>‚ö†Ô∏è Mismatch Details:</h3>
        <pre style='background:#f8f9fa; padding:10px; border-left:4px solid #d9534f; font-size:14px;'>${mismatch_details}</pre>
        <p style='font-size:14px; color:#333;'>üîç Please review the details and take necessary actions.</p>
        <hr style='border:0; height:1px; background:#ddd;'>
        <p style='color:#5e5e5e; font-size:12px; text-align:center;'>üìß This is an automated notification from the DevOps monitoring system.</p>
    </div>
</body></html>"

# Create email with attachment
email_file=$(mktemp)
boundary="boundary-$(date +%s)"

{
    echo "Subject: ${subject}"
    echo "From: ${MAIL_FROM}"
    echo "To: ${MAIL_TO}"
    echo "MIME-Version: 1.0"
    echo "Content-Type: multipart/mixed; boundary=${boundary}"
    echo
    echo "--${boundary}"
    echo "Content-Type: text/html; charset=UTF-8"
    echo "Content-Transfer-Encoding: 7bit"
    echo
    echo "${email_body}"
    echo
    echo "--${boundary}"
    echo "Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    echo "Content-Disposition: attachment; filename=\"$(basename "$excel_file")\""
    echo "Content-Transfer-Encoding: base64"
    echo
    base64 "$excel_file"
    echo
    echo "--${boundary}--"
} > "$email_file"

# Send email using curl
curl -s --url "smtp://${SMTP_HOST}:${SMTP_PORT}" --mail-from "${MAIL_FROM}" --mail-rcpt "${MAIL_TO}" --upload-file "$email_file"

# Cleanup
rm -f "$email_file"

echo "‚úÖ Email sent successfully with Excel attachment!"




====================================================================
                    generate_excel.py
====================================================================

import sys
import os
from openpyxl import Workbook
from datetime import datetime

def generate_excel(server_name, account, mismatch_details, status):
    """ Create an Excel report and return the filename. """

    # Define Excel file name with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    excel_file = f"OS_Image_Report_{server_name}_{timestamp}.xlsx"

    # Create a new Excel workbook and worksheet
    wb = Workbook()
    ws = wb.active
    ws.title = "OS Image Report"

    # Add headers
    headers = ["Server Name", "Account", "Mismatch Details", "Status"]
    ws.append(headers)

    # Add data
    ws.append([server_name, account, mismatch_details, status])

    # Auto-adjust column width
    for col in ws.columns:
        max_length = max(len(str(cell.value)) for cell in col) + 2
        ws.column_dimensions[col[0].column_letter].width = max_length

    # Save the file
    wb.save(excel_file)
    print(excel_file)  # Return filename

if __name__ == "__main__":
    if len(sys.argv) < 5:
        print("‚ùå ERROR: Missing arguments for Excel generation")
        sys.exit(1)

    server_name = sys.argv[1]
    account = sys.argv[2]
    mismatch_details = sys.argv[3]
    status = sys.argv[4]

    generate_excel(server_name, account, mismatch_details, status)
