import sys
import os
from common import logger, sgcloud
from contextlib import redirect_stdout

NOTIFY_SCRIPT = "/path/to/notify_mismatch.sh"  # Adjust the path accordingly

def get_ocs_images(server_name, region):
    sg_cloud_client = sgcloud.Client(
        os.environ["ACCOUNT_ID"], os.environ["CLIENT_ID"], os.environ["CLIENT_SECRET"]
    )
    
    servers_images = {}  # Store server name -> image mapping

    with open(os.devnull, "w") as devnull:
        with redirect_stdout(devnull):
            image_ids = sg_cloud_client.get_server_image_id(server_name, region)  # Get list of image IDs
        
        for server, image_id in image_ids.items():  # Loop over servers
            with redirect_stdout(devnull):
                image_name = sg_cloud_client.get_image_details(image_id, region)  # Get image name
            servers_images[server] = image_name  # Store result

    return servers_images

def main():
    server_name = sys.argv[1]
    region = sys.argv[2]
    
    servers_images = get_ocs_images(server_name, region)

    # Print the list of servers with their deployed image names
    print("\nDeployed images on servers:")
    for server, image in servers_images.items():
        print(f"{server} = {image}")

    # Check if all images are the same
    unique_images = set(servers_images.values())
    
    if len(unique_images) > 1:
        print("\n⚠️ Image mismatch detected! Sending notification...")
        
        # Prepare mismatch message for email
        mismatch_output = "\n".join(f"{server} = {image}" for server, image in servers_images.items())
        
        # Call notify script with the mismatch details
        os.system(f"sh {NOTIFY_SCRIPT} '{server_name}' '{mismatch_output}'")

if __name__ == "__main__":
    main()