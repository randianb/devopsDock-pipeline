=========================================================================
                         server_image_lookup.py
=========================================================================

import sys
import os
from contextlib import redirect_stdout
from common import logger, sgcloud

def get_ocs_image_name(server_name):
    # Initialize the SG Cloud client with environment variables
    sg_cloud_client = sgcloud.Client(
        os.environ['ACCOUNT_ID'],
        os.environ['CLIENT_ID'],
        os.environ['CLIENT_SECRET']
    )

    # Redirect stdout to /dev/null to suppress unwanted output
    with open(os.devnull, 'w') as devnull:
        with redirect_stdout(devnull):
            # Get the image ID of the server
            image_id = sg_cloud_client.get_image_id_from_server(server_name)

            # Get the image name using the image ID
            image_name = sg_cloud_client.get_image_details(image_id)

    # Output the image name via stdout
    print(image_name)

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <server_name>")
        sys.exit(1)

    server_name = sys.argv[1]
    get_ocs_image_name(server_name)

if __name__ == "__main__":
    main()


=========================================================================
                                Functions
=========================================================================

    def get_image_id_from_server(self, server_name: str):
            access_token = self.get_iam_token(["ccs:read:all"])
            res = http_client.get(
                f"{OCS_SERVERS_ENDPOINT}/detail",
                params={"status": "ACTIVE", "name": server_name},
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {access_token}"
                }
            )

            if res.status_code == 200:
                servers = res.json().get('servers', [])
                if servers and 'image' in servers[0]: 
                    return servers[0]['image']['id']
                else:
                    raise Exception(f"No active server found with name {server_name}")
            else:
                raise Exception(f"Failed to retrieve server details: {res.status_code} {res.text}")

    def get_image_details(self, image_id: str) -> str:
        """
        Retrieves the name of an image using its ID.
        """
        access_token = self.get_iam_token(["osf:read"])
        res = http_client.get(
            f"{OCS_IMAGES_ENDPOINT}/{image_id}",
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }
        )

        if res.status_code == 200:
            # Extract the image name from the response
            image_name = res.json().get("image", {}).get("name")
            if image_name:
                return image_name
            else:
                raise Exception("Image name not found in the response")
        else:
            raise Exception(f"Failed to retrieve image details: {res.status_code} {res.text}")


======================================================
 Probleme
======================================================
  File "/home/jenkins/agent/workspace/DJD/CD-Deploy/openr-pipeline-int/pipeline/lib/common/sgcloud.py", line 373, in get_server_image_id
    raise KeyError("image")
KeyError: 'image'

here's the fucntion : 
 def get_server_image_id(self, server_name, retry=3):
        access_token = self.get_iam_token(["ccs:read:all"])
        try:
            res = http_client.get(
                OCS_SERVERS_ENDPOINT,
                params={"status": "ACTIVE", "name": server_name},
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {access_token}"
                }
            )

            if res.status_code != 200 and retry > 0:
                time.sleep(2)
                return self.get_server_image_id(server_name, retry=retry - 1)

            if res.status_code != 200:
                logger.error(f"Failed to retrieve server details: {res.text}")
                raise Exception("Failed to retrieve server details")

            data = res.json()
            logger.debug(f"Server response data: {data}")

            if "servers" not in data or len(data["servers"]) == 0:
                logger.error("No servers found")
                raise Exception("No servers found")

            # Check if the 'image' key exists in the first server
            if "image" in data["servers"][0]:
                image_id = data["servers"][0]["image"]["id"]
                logger.debug(f"Retrieved image ID: {image_id}")
                return image_id
            else:
                logger.error(f"Image ID not found in server data: {data['servers'][0]}")
                raise KeyError("image")

        except Exception as e:
            logger.error(f"Error in get_server_image_id: {e}")
            raise

the json ouput is similar to this when we use curl to similate the fucntion : 
curl -X 'GET' \
  'https://cloud.com/v0/servers/detail?status=ACTIVE&name=grafana' \
  -H 'accept: application/json' \
  -H 'Authorization: Bearer 4phweBONUexGeQoDg6_eTV4YP9Y'
  {
    "servers": [
        {
            "accessIPv4": "182.0.28.32",
            "availability_zone": "eu-fr-paris-1",
            "created": "2024-12-21T20:39:00Z",
            "description": "grafana-xsf-main-blue",
            "flavor": {
                "disk": 0,
                "id": "ab91679b-99fc-412e-8626-cc6920f1833c",
                "links": [
                    {
                        "href": "https://cloud.com/v0/flavors/ab91679b-99fc-412e-8626-cc6920f1833c",
                        "rel": "self"
                    }
                ],
                "original_name": "Large 4vCPU-8GB",
                "ram": 8192,
                "swap": 0,
                "vcpus": 4
            },
            "id": "04dcdd01-cf81-4061-8df9-a180a3cfea48",
            "image": {
                "id": "9922255f-e697-4301-8dcb-af384300f924",
                "links": [
                    {
                        "href": "https://cloud.com/v0/images/9922255f-e697-4301-8dcb-af384300f924",
                        "rel": "self"
                    }
                ]
            },
            "key_name": "automation",
            "metadata": {},
            "name": "grafana-xsf-main-blue[1]",
            "security_groups": [
                {
                    "name": "xsf-prd"
                },
                {
                    "name": "SGCP_INFRA_SECURITY_GROUP_V3"
                }
            ],
            "status": "ACTIVE",
            "tags": [
                "env=prd",
                "group=grafana-xsf-main",
                "gts:PUPPET_ENROLLED",
                "sgcp:beneficiary=3226f964-ebcb-422c-88d6-a7b31d8054e9"
            ],
            "vifmacaddress": "fa:16:3e:94:5c:6b"
        },
        {
            "accessIPv4": "182.1.32.149",
            "availability_zone": "eu-fr-paris-2",
            "created": "2024-12-21T20:39:00Z",
            "description": "grafana-xsf-main-blue",
            "flavor": {
                "disk": 0,
                "id": "ab91679b-99fc-412e-8626-cc6920f1833c",
                "links": [
                    {
                        "href": "https://cloud.com/v0/flavors/ab91679b-99fc-412e-8626-cc6920f1833c",
                        "rel": "self"
                    }
                ],
                "original_name": "Large 4vCPU-8GB",
                "ram": 8192,
                "swap": 0,
                "vcpus": 4
            },
            "id": "d11ccf0a-ac0e-4d09-b66b-6bac859ce476",
            "image": {
                "id": "9922255f-e697-4301-8dcb-af384300f924",
                "links": [
                    {
                        "href": "https://cloud.com/v0/images/9922255f-e697-4301-8dcb-af384300f924",
                        "rel": "self"
                    }
                ]
            },
            "key_name": "automation",
            "metadata": {},
            "name": "grafana-xsf-main-blue[1]",
            "security_groups": [
                {
                    "name": "xsf-prd"
                },
                {
                    "name": "SGCP_INFRA_SECURITY_GROUP_V3"
                }
            ],
            "status": "ACTIVE",
            "tags": [
                "env=prd",
                "group=grafana-xsf-main",
                "gts:PUPPET_ENROLLED",
                "sgcp:beneficiary=3226f964-ebcb-422c-88d6-a7b31d8054e9"
            ],
            "vifmacaddress": "fa:16:3e:bb:b3:37"
        }
    ]
}
