modify this fucntiosn on order to output a list of the images and the latest one between them : 
    def get_images(self, retry=3, region="paris"):
        access_token = self.get_iam_token(["osf:read"])
        res = http_client.get(
            OCS_IMAGES_ENDPOINT.replace("#region#",region),
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }
        )

        images = []
        data = res.json()

        if 'images' not in data and retry > 0:
            time.sleep(2)
            return self.get_images(retry=retry - 1)

        if 'images' not in data:
            logger.error(res.text)
            raise Exception("Failed to retrieve images")

        data = data['images']

        for image in data:
            # select only RHEL 9
            if image['status'].lower() == 'created' and "rhel_9" in image['name'].lower():
                images.append(image['name'])
            else:
                logger.debug("Skipping image %s" % image['status'])
        return images

    def get_latest_image(self,region):
        logger.debug(f"get_latest_image for {region}")
        images = self.get_images(region=region)
        logger.debug(f"Fetched image for {region} is : {images}")
        return images[0]

and this must also print the list of output and then the latest one : 
import sys
from common import logger, sgcloud
import os
from contextlib import redirect_stdout
def get_latest_os_image(region="paris"):
    sg_cloud_client = sgcloud.Client(os.environ['ACCOUNT_ID'],os.environ['CLIENT_ID'],os.environ['CLIENT_SECRET'])
    # redirect stdout to /dev/null
    with open(os.devnull,'w') as devnull:
        with redirect_stdout(devnull):        
            latest_image = sg_cloud_client.get_latest_image(region=region)
    # send the image name via stdout
    print(latest_image)
    
def main():
    region = sys.argv[1]
    regions = region.split(",") if "," in region else [region]

    for region in regions:
        get_latest_os_image(region.strip())
    
if __name__ == "__main__":
    main()
