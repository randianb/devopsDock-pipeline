
    def get_image_details(self, image_data, region, max_retries=3, backoff=2):
        access_token = self.get_iam_token(["ccs:read"])
        servers_images = {}  # Mapping: server_name -> image_name

        for entry in image_data:
            for server_name, image_id in entry.items():
                endpoint = OCS_SERVER_IMAGE_ENDPOINT.replace("#region#", region)
                url = f"{endpoint}/{image_id}"

                for attempt in range(1, max_retries + 1):
                    res = http_client.get(
                        url,
                        headers={
                            "accept": "application/json",
                            "Authorization": f"Bearer {access_token}"
                        }
                    )

                    if res.status_code == 200:
                        data = res.json()
                        if "image" in data and "name" in data["image"]:
                            servers_images[server_name] = data["image"]["name"]
                        else:
                            logger.error(f"Missing 'image' field in response: {data}")
                        break  # Exit retry loop on success
                    
                    logger.warning(f"Attempt {attempt}/{max_retries} failed for {server_name}: {res.status_code} - {res.text}")

                    if attempt < max_retries:
                        sleep_time = backoff ** attempt  # Exponential backoff
                        logger.info(f"Retrying in {sleep_time} seconds...")
                        time.sleep(sleep_time)
                    else:
                        logger.error(f"Failed to retrieve image details for {server_name} after {max_retries} attempts.")

        return servers_images
