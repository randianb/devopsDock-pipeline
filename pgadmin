# pgAdmin 4 configuration for external PostgreSQL
CONFIG_DATABASE_URI = "postgresql://{{ pgadmin_db_user }}:{{ pgadmin_db_password }}@{{ pgadmin_db_host }}:{{ pgadmin_db_port }}/{{ pgadmin_db_name }}"

DATA_DIR = '/pgadmin/data'
LOG_FILE = '/var/log/pgadmin4/pgadmin4.log'



####ansible tasks:
- name: Extract Vault Configuration (Role ID, Secret ID, URL, and Namespace)
  set_fact:
    vault_role_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_ROLE: (.*)', '\\1') }}"
    vault_secret_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_SECRET: (.*)', '\\1') }}"
    vault_url: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_URL: (.*)', '\\1') | regex_replace('\\[|\\]|\'', '') }}"
    vault_namespace: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_NAMESPACE: (.*)', '\\1') | regex_replace('\\[|\\]|\'', '') }}"

- name: Debug Vault Variables
  debug:
    msg: "Role ID: {{ vault_role_id }}, Secret ID: {{ vault_secret_id }}, URL: {{ vault_url }}, Namespace: {{ vault_namespace }}"

- name: Retrieve client token 
  become: true
  command: >
    curl --request POST --data '{"role_id": "{{ vault_role_id }}", "secret_id": "{{ vault_secret_id }}"}' 
    {{ vault_url }}/v1/myVault/{{ vault_namespace }}/auth/approle/login
  register: vault_auth_response

- name: Extract Vault Token
  set_fact:
    vault_client_token: "{{ vault_auth_response.stdout | from_json | json_query('auth.client_token') }}"

- name: Debug Vault Token
  debug:
    msg: "Vault Client Token: {{ vault_client_token }}"

- name: Fetch pgAdmin4 setup credentials from Vault
  uri:
    url: "{{ vault_url }}/v1/myVault/{{ vault_namespace }}/kv/data/xsf/pgadmin4"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_client_token }}"
    return_content: yes
    status_code: 200
  register: vault_secret_response

- name: Debug Vault Credentials
  debug:
    msg: "pgadmin_setup_email: {{ vault_secret_response.json.data.data.pgadmin_setup_email }}, pgadmin_setup_password: {{ vault_secret_response.json.data.data.pgadmin_setup_password }}"


###error
- name: Extract Vault Configuration (Role ID, Secret ID, URL, and Namespace)
  set_fact:
    vault_role_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_ROLE: (.*)', '\\1') }}"
    vault_secret_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_SECRET: (.*)', '\\1') }}"
    vault_url: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_URL: (.*)', '\\1') | regex_replace('\

\[|\\]

|\\'|\"', '') }}"
    vault_namespace: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_NAMESPACE: (.*)', '\\1') | regex_replace('\

\[|\\]

|\\'|\"', '') }}"


###solution 
- name: Extract Vault Configuration (Role ID, Secret ID, URL, and Namespace)
  set_fact:
    vault_role_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_ROLE: (.*)', '\\1') }}"
    vault_secret_id: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_SECRET: (.*)', '\\1') }}"
    vault_url: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_URL: (.*)', '\\1') | regex_replace('[\\n\\r\\\"\\\\\', '') }}"
    vault_namespace: "{{ vault_info_file['content'] | b64decode | regex_search('VAULT_NAMESPACE: (.*)', '\\1') | regex_replace('[\\n\\r\\\"\\\\\', '') }}"