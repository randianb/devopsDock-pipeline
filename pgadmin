import sys
import json
import re

def parse_list(arg):
    """Parse a string representation of a list into a Python list."""
    try:
        return json.loads(arg.replace("'", '"'))
    except json.JSONDecodeError:
        print(f"Error: Invalid list format -> {arg}")
        sys.exit(1)

def extract_version(image_name):
    """
    Extracts numerical year and week number from the OS image name.
    Expected format: <prefix>_<year>_w<week>
    Example: "ocs_dev_rhel_9_2024_w51" -> (2024, 51)
    """
    match = re.search(r'(\d{4})_w(\d{2})', image_name)
    if match:
        return int(match.group(1)), int(match.group(2))  # Return (year, week)
    print(f"Warning: Unable to extract version from {image_name}. Defaulting to (0,0).")
    return (0, 0)  # Fallback if format isn't found

def is_newer(image1, image2):
    """
    Compares two OS images based on year and week.
    Returns True if image1 is newer than image2.
    """
    return extract_version(image1) > extract_version(image2)

def determine_common_latest_image(latest_paris, latest_north, list_paris, list_north):
    """Determine the latest common OS image between Paris and North."""
    if latest_paris == latest_north:
        return latest_paris  # Both regions already have the same latest OS image

    common_images = sorted(set(list_paris) & set(list_north), key=extract_version, reverse=True)
    if common_images:
        return common_images[0]  # Pick the latest common OS image

    print("Error: No common OS image found between Paris and North.")
    sys.exit(1)  # Exit if no common image exists

def check_deployment_needed(region, installed_image, os_factory):
    """Check if deployment is needed for a given region. Returns (deployment_needed, image_to_return)"""
    if installed_image == os_factory:
        print(f"[{region}] Latest common OS image is already installed: {installed_image}")
        return False, installed_image  # No deployment needed
    
    if is_newer(installed_image, os_factory):
        print(f"[{region}] Installed OS ({installed_image}) is newer than the common OS ({os_factory}). No downgrade needed.")
        return False, installed_image  # No deployment needed, return current image
    
    print(f"[{region}] Installed OS ({installed_image}) is outdated. Upgrade to {os_factory} is required.")
    return True, os_factory  # Deployment needed, return target image

def main():
    if len(sys.argv) < 7:
        print("Usage: compare_latest_ocs_images.py <LATEST_OS_IMAGE_paris> <LATEST_OS_IMAGE_north> "
              "<LIST_OS_IMAGE_paris> <LIST_OS_IMAGE_north> <IMAGE_INSTALLED_paris> <IMAGE_INSTALLED_north>")
        sys.exit(1)

    latest_os_paris = sys.argv[1]
    latest_os_north = sys.argv[2]
    list_os_paris = parse_list(sys.argv[3])
    list_os_north = parse_list(sys.argv[4])
    image_installed_paris = sys.argv[5]
    image_installed_north = sys.argv[6]

    # Step 1: Determine the latest common OS image
    os_factory = determine_common_latest_image(latest_os_paris, latest_os_north, list_os_paris, list_os_north)
    print(f"Selected OS Image for deployment: {os_factory}")

    # Step 2: Check if deployment is needed
    deploy_paris, final_image_paris = check_deployment_needed("Paris", image_installed_paris, os_factory)
    deploy_north, final_image_north = check_deployment_needed("North", image_installed_north, os_factory)

    # Step 3: Execute Deployment Decision
    if deploy_paris or deploy_north:
        print(f"Deployment required in: {'Paris' if deploy_paris else ''} {'North' if deploy_north else ''}".strip())
        print(f"Use this OS image: {os_factory}")
    else:
        print(f"No deployment needed. Installed images: Paris -> {final_image_paris}, North -> {final_image_north}")

if __name__ == "__main__":
    main()