Create 2 python functions that will perofmr the following : 
the first one will send a request like this : 
curl -X 'GET' \
  'https://cloud.com/v0/servers/detail?status=ACTIVE&name=grafana' \
  -H 'accept: application/json' \
  -H 'Authorization: Bearer 4phweBONUexGeQoDg6_eTV4YP9Y'
the result is this: 
  {
    "servers": [
        {
            "accessIPv4": "182.0.28.32",
            "availability_zone": "eu-fr-paris-1",
            "created": "2024-12-21T20:39:00Z",
            "description": "grafana-xsf-main-blue",
            "flavor": {
                "disk": 0,
                "id": "ab91679b-99fc-412e-8626-cc6920f1833c",
                "links": [
                    {
                        "href": "https://cloud.com/v0/flavors/ab91679b-99fc-412e-8626-cc6920f1833c",
                        "rel": "self"
                    }
                ],
                "original_name": "Large 4vCPU-8GB",
                "ram": 8192,
                "swap": 0,
                "vcpus": 4
            },
            "id": "04dcdd01-cf81-4061-8df9-a180a3cfea48",
            "image": {
                "id": "9922255f-e697-4301-8dcb-af384300f924",
                "links": [
                    {
                        "href": "https://cloud.com/v0/images/9922255f-e697-4301-8dcb-af384300f924",
                        "rel": "self"
                    }
                ]
            },
            "key_name": "automation",
            "metadata": {},
            "name": "grafana-xsf-main-blue[1]",
            "security_groups": [
                {
                    "name": "xsf-prd"
                },
                {
                    "name": "SGCP_INFRA_SECURITY_GROUP_V3"
                }
            ],
            "status": "ACTIVE",
            "tags": [
                "env=prd",
                "group=grafana-xsf-main",
                "gts:PUPPET_ENROLLED",
                "sgcp:beneficiary=3226f964-ebcb-422c-88d6-a7b31d8054e9"
            ],
            "vifmacaddress": "fa:16:3e:94:5c:6b"
        }
    ]
}
the function must retrive the image id : "image": {
                "id": "9922255f-e697-4301-8dcb-af384300f924",

and then geiv eit to another a function that will used to perofmr the following : 
curl -X 'GET' \
  'https://cloud.com/v0/images/9922255f-e697-4301-8dcb-af384300f924' \
  -H 'accept: application/json' \
  -H 'Authorization: Bearer 4phweBONUexGeQoDg6_eTV4YP9Y'

  {
    "image": {
      "CCS:marley_os_release": "RHEL_9",
      "CCS:marley_ownership_id": "256_new",
      "CCS:marley_payer_dep_code": "3000328275",
      "CCS:marley_team_in_charge": "IAS-SYS-UNX",
      "CCS:marley_team_responsible": "FT OSS",
      "container_format": "bare",
      "created_at": "2025-01-26T11:59:42Z",
      "disk_format": "raw",
      "file": "/v2/images/dafab7f7-2098-4afe-a708-628b1dbbf99c/file",
      "id": "9922255f-e697-4301-8dcb-af384300f924",
      "min_disk": 64,
      "min_ram": 1,
      "name": "OS_v1_RHEL_9_2025_w04",
      "os_type": "Linux",
      "owner": "3226f964ebcb422c88d6a7b31d8054e9",
      "self": "",
      "size": 68719476736,
      "status": "active",
      "updated_at": "2025-01-26T12:28:08Z",
      "visibility": "community"
    }
  }

the structure of those 2 functions must be similar to this : 

    def get_images(self, retry=3, region="paris"):
        access_token = self.get_iam_token(["osf:read"])
        res = http_client.get(
            OCS_IMAGES_ENDPOINT.replace("#region#",region),
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {access_token}"
            }
        )

        images = []
        data = res.json()

        if 'images' not in data and retry > 0:
            time.sleep(2)
            return self.get_images(retry=retry - 1)

        if 'images' not in data:
            logger.error(res.text)
            raise Exception("Failed to retrieve images")

        data = data['images']

        for image in data:
            # select only RHEL 9
            if image['status'].lower() == 'created' and "rhel_9" in image['name'].lower():
                images.append(image['name'])
            else:
                logger.debug("Skipping image %s" % image['status'])
        return images

    def get_latest_image(self,region):
        logger.debug(f"get_latest_image for {region}")
        images = self.get_images(region=region)
        logger.debug(f"Fetched image for {region} is : {images}")
        return images[0]

 the OCS_IMAGES_ENDPOINT is 'https://cloud.comn/v0/images'       

the caller of the this function is like this : 
import sys
from common import logger, sgcloud
import os
from contextlib import redirect_stdout
def get_ocs_image_id():
    sg_cloud_client = sgcloud.Client(os.environ['ACCOUNT_ID'],os.environ['CLIENT_ID'],os.environ['CLIENT_SECRET'])
    # redirect stdout to /dev/null
    with open(os.devnull,'w') as devnull:
        with redirect_stdout(devnull):        
            latest_image = sg_cloud_client.get_image_id(server_name=server_name)
    # send the image name via stdout
    print(latest_image)
    
def main():
    server_name = sys.argv[1]
    get_ocs_image_id(server_name)
    
if __name__ == "__main__":
    main()



###solution
import sys
import os
import logging
import requests
import time
from contextlib import redirect_stdout

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Constants
OCS_IMAGES_ENDPOINT = 'https://cloud.com/v0/images'
SERVERS_ENDPOINT = 'https://cloud.com/v0/servers/detail'

class ImageManager:
    def __init__(self, access_token):
        self.access_token = access_token

    def get_server_image_id(self, server_name, retry=3):
        """
        Retrieve the image ID from the server details.
        """
        try:
            res = requests.get(
                SERVERS_ENDPOINT,
                params={"status": "ACTIVE", "name": server_name},
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {self.access_token}"
                }
            )

            if res.status_code != 200 and retry > 0:
                time.sleep(2)
                return self.get_server_image_id(server_name, retry=retry - 1)

            if res.status_code != 200:
                logger.error(f"Failed to retrieve server details: {res.text}")
                raise Exception("Failed to retrieve server details")

            data = res.json()
            if "servers" not in data or len(data["servers"]) == 0:
                logger.error("No servers found")
                raise Exception("No servers found")

            # Extract the image ID from the first server
            image_id = data["servers"][0]["image"]["id"]
            logger.debug(f"Retrieved image ID: {image_id}")
            return image_id

        except Exception as e:
            logger.error(f"Error in get_server_image_id: {e}")
            raise

    def get_image_details(self, image_id, retry=3):
        """
        Retrieve the details of an image using its ID.
        """
        try:
            res = requests.get(
                f"{OCS_IMAGES_ENDPOINT}/{image_id}",
                headers={
                    "accept": "application/json",
                    "Authorization": f"Bearer {self.access_token}"
                }
            )

            if res.status_code != 200 and retry > 0:
                time.sleep(2)
                return self.get_image_details(image_id, retry=retry - 1)

            if res.status_code != 200:
                logger.error(f"Failed to retrieve image details: {res.text}")
                raise Exception("Failed to retrieve image details")

            data = res.json()
            if "image" not in data:
                logger.error("No image details found")
                raise Exception("No image details found")

            logger.debug(f"Retrieved image details: {data['image']}")
            return data["image"]

        except Exception as e:
            logger.error(f"Error in get_image_details: {e}")
            raise

def get_ocs_image_id(server_name):
    """
    Retrieve the image ID for the given server name.
    """
    # Initialize the sgcloud client (replace with your actual client initialization)
    sg_cloud_client = sgcloud.Client(
        os.environ['ACCOUNT_ID'],
        os.environ['CLIENT_ID'],
        os.environ['CLIENT_SECRET']
    )

    # Redirect stdout to /dev/null to suppress output
    with open(os.devnull, 'w') as devnull:
        with redirect_stdout(devnull):
            # Retrieve the access token using the client
            access_token = sg_cloud_client.get_iam_token(["osf:read"])

            # Initialize the ImageManager with the access token
            image_manager = ImageManager(access_token)

            # Retrieve the image ID for the server
            image_id = image_manager.get_server_image_id(server_name)

    # Send the image ID via stdout
    print(image_id)

def main():
    """
    Main function to handle command-line arguments and call the get_ocs_image_id function.
    """
    if len(sys.argv) != 2:
        print("Usage: script.py <server_name>")
        sys.exit(1)

    server_name = sys.argv[1]  # Retrieve the server name from the command line
    get_ocs_image_id(server_name)

if __name__ == "__main__":
    main()