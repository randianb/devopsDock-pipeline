#!/bin/bash

STRIGIL_DIR="/home/app/work/strigil"
LOG_FILE="$STRIGIL_DIR/cron_logs/cron_log_$(date +'%Y-%m-%d').log"
CRITICAL_USAGE=25
FILESYSTEM="/dev/mapper/vg0-root"
SMTP_HOST="{{ smtp_host }}"
SMTP_PORT=25
CONFIG_FILE="$STRIGIL_DIR/strigil_config.json"
START_TIME=$(date)

# Extract hostname and nickname
NICKNAME=$(echo "$PLT_VM_NICKNAME")
HOSTNAME=$(echo "$HOSTNAME")

# Gmail credentials
GMAIL_USER="devops.monitoring@gmail.com"
GMAIL_PASS=""  # Replace with your Gmail App Password

# Email details
MAIL_FROM="$GMAIL_USER"
MAIL_TO="anouar.harrou@gmail.com"

# Helper function to send email notifications
send_email() {
    local subject=$1
    local message=$2
    local temp_file=$(mktemp)

    # Format email content with better structure and emojis
    echo -e "Subject: $subject\nContent-Type: text/html; charset=UTF-8\n\n<html><body><h2 style='color:#2E8B57;'>$subject</h2><p>$message</p><footer><p>Sent from <strong>DevOps Monitoring</strong> üõ†Ô∏è</p></footer></body></html>" > "$temp_file"

    curl -s --url "smtp://$SMTP_HOST:$SMTP_PORT" --mail-from "$MAIL_FROM" --mail-rcpt "$MAIL_TO" --upload-file "$temp_file" --user "$GMAIL_USER:$GMAIL_PASS"

    rm -f "$temp_file"
}

# Create log directory and file if they don't exist
mkdir -p "$(dirname "$LOG_FILE")" || {
    send_email "üö® Script Failure: Log Directory Creation Failed" "Failed to create log directory. Please investigate the issue."
    exit 1
}
touch "$LOG_FILE" || {
    send_email "üö® Script Failure: Log File Creation Failed" "Failed to create log file. Please check the permissions and try again."
    exit 1
}

{
    echo "#######################################################################"
    echo "CRON JOB STARTED AT $START_TIME"
    echo "#######################################################################"
    echo "CHECK DISK USAGE"

    usage=$(df -h | awk -v fs="$FILESYSTEM" '$1 == fs {print $5}' | sed 's/%//')
    echo "FILESYSTEM $FILESYSTEM USAGE : $usage%"

    if [ "$usage" -ge "$CRITICAL_USAGE" ]; then
        echo "USAGE IS GREATER OR EQUAL TO $CRITICAL_USAGE% ==> RUN STRIGIL SCRIPT"

        cd "$STRIGIL_DIR" || {
            send_email "üö® Script Failure: Directory Change Failed" "Failed to change directory to $STRIGIL_DIR. Please check the directory."
            exit 1
        }

        # Log strigil.py execution start
        echo "#######################################################################"
        echo "STARTING STRIGIL SCRIPT EXECUTION AT $(date)"
        echo "#######################################################################"

        if ! /bin/python strigil.py; then
            echo "#######################################################################"
            echo "STRIGIL SCRIPT FAILED AT $(date)"
            echo "#######################################################################"
            send_email "‚ùå Script Failure: Strigil Execution Failed" "The strigil.py script failed to execute. Please check the logs in $LOG_FILE for more details."
            exit 1
        fi

        # Log strigil.py execution end
        echo "#######################################################################"
        echo "STRIGIL SCRIPT COMPLETED SUCCESSFULLY AT $(date)"
        echo "#######################################################################"

        # Retrieve bucket name after strigil.py execution
        if bucket_name=$(jq -r '.config.bucket' "$CONFIG_FILE"); then
            echo "Bucket name retrieved successfully: $bucket_name"
        else
            send_email "‚ùå Script Failure: Bucket Name Retrieval Failed" "Failed to retrieve bucket name from $CONFIG_FILE after running strigil.py."
            exit 1
        fi

        # Retrieve path name
        if path=$(jq -r '.config.project' "$CONFIG_FILE"); then
            echo "Path name retrieved successfully: $path"
        else
            send_email "‚ùå Script Failure: Path Name Retrieval Failed" "Failed to retrieve path name from $CONFIG_FILE after running strigil.py."
            exit 1
        fi

        # Retrieve Service name
        if service=$(jq -r '.services[0].service' "$CONFIG_FILE"); then
            echo "Service name retrieved successfully: $service"
        else
            send_email "‚ùå Script Failure: Service Name Retrieval Failed" "Failed to retrieve Service name from $CONFIG_FILE after running strigil.py."
            exit 1
        fi

        END_TIME=$(date)

        # Send success email with a more structured message and emojis
        send_email "‚úÖ Script Success: Execution Completed" "
        <ul>
            <li><strong>Start Time:</strong> $START_TIME ‚è≥</li>
            <li><strong>End Time:</strong> $END_TIME ‚è∞</li>
            <li><strong>Service Name:</strong> $service üîß</li>
            <li><strong>Bucket Name:</strong> $bucket_name üóÇÔ∏è</li>
            <li><strong>Path:</strong> $path üìÅ</li>
            <li><strong>Hostname:</strong> $HOSTNAME üñ•Ô∏è</li>
            <li><strong>Nickname:</strong> $NICKNAME üë§</li>
        </ul>
        <p>Everything went smoothly! üéâ</p>"
    else
        echo "USAGE IS LESS THAN $CRITICAL_USAGE% ==> DO NOTHING"
    fi

    echo "#######################################################################"
    echo "CRON JOB ENDED AT $(date)"
    echo "#######################################################################"

} >> "$LOG_FILE" 2>&1 || {
    send_email "‚ùå Script Failure: Unknown Error" "An unknown error occurred while running the script. Check the logs in $LOG_FILE for details."
    exit 1
}
