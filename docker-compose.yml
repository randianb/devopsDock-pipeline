networks:
  devops-network:
    driver: bridge

volumes:
  jenkins: {}
  nexus-data: {}
  sonar-data: {}
  sonar-extensions: {}
  sonar-logs: {}
  gitlab-data: {}
  gitlab-logs: {}
  gitlab-config: {}
  gitlab-runner-config: {}
  postgres: {}

services:
  nexus:
    image: ${NEXUS_IMAGE}
    restart: always
    volumes:
      - "nexus-data:/sonatype-work"
    labels:
      - traefik.enable=true
      - traefik.http.routers.nexus.rule=Host(`nexus-devops.com`) # 使用服务名作为路由器名
      - traefik.http.routers.nexus.entrypoints=https
      - traefik.http.services.nexus.loadbalancer.server.port=${NEXUS_PORT}
      - traefik.http.routers.nexus.tls=true # TLS配置应附加到具体的路由器上
      - traefik.http.routers.nexus.tls.certresolver=${CERT_RESOLVER}
    ports:
      # Nexus 通常不需要直接暴露端口，Traefik会代理它
      # 除非你还需要直接从宿主机访问Nexus，否则这些ports可以移除
      - "${NEXUS_PORT}:${NEXUS_PORT}"
    networks:
      - devops-network

  jenkins:
    image: ${JENKINS_IMAGE}
    container_name: jenkins
    privileged: true
    user: root
    labels:
      - traefik.enable=true
      - traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOSTNAME}`) # 使用服务名作为路由器名
      - traefik.http.services.jenkins.loadbalancer.server.port=${JENKINS_PORT} # 这里的端口应是Jenkins容器内部监听的端口，通常是8080
      - traefik.http.routers.jenkins.entrypoints=https
      - traefik.http.routers.jenkins.tls=true # TLS配置应附加到具体的路由器上
      - traefik.http.routers.jenkins.tls.certresolver=${CERT_RESOLVER}
    ports:
      # Jenkins 通常不需要直接暴露端口，Traefik会代理它
      # 除非你还需要直接从宿主机访问Jenkins，否则这些ports可以移除
      - "8080:8080"
    volumes:
      - jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devops-network

  sonarqube:
    image: ${SONARQUBE_IMAGE}
    container_name: sonarqube
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_HOSTNAME}`) # 使用服务名作为路由器名
      - traefik.http.routers.sonarqube.entrypoints=https
      - traefik.http.services.sonarqube.loadbalancer.server.port=${SONARQUBE_PORT} # 这里的端口应是SonarQube容器内部监听的端口，通常是9000
      - traefik.http.routers.sonarqube.tls=true # TLS配置应附加到具体的路由器上
      - traefik.http.routers.sonarqube.tls.certresolver=${CERT_RESOLVER}
    ports:
      # SonarQube 通常不需要直接暴露端口，Traefik会代理它
      # 除非你还需要直接从宿主机访问SonarQube，否则这些ports可以移除
      - "${SONARQUBE_PORT}:${SONARQUBE_PORT}"
    networks:
      - devops-network
    depends_on:
      - postgres
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/devops
      - SONARQUBE_JDBC_USERNAME=${POSTGRES_USER}
      - SONARQUBE_JDBC_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - sonar-data:/opt/sonarqube/data
      - sonar-extensions:/opt/sonarqube/extensions
      - sonar-logs:/opt/sonarqube/logs

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      # PostgreSQL 通常不需要直接暴露端口到宿主机，因为只有Sonarqube和PgAdmin需要访问它
      # 如果你不需要从宿主机直接访问PostgreSQL，可以移除此ports配置
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres:/var/lib/postgresql
    restart: unless-stopped
    networks:
      - devops-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  traefik:
    image: ${TRAEFIK_IMAGE}
    container_name: traefik
    command:
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --api=true
      - --api.dashboard=true
      - --accesslog=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.dashboard.address=:8082 # 如果你不需要从宿主机直接访问Traefik Dashboard，可以考虑移除这个entrypoint和下面的8082端口映射
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.file=true
      - --providers.file.directory=/etc/traefik/dynamic # 动态配置目录
      - --providers.file.watch=true # 监听文件变化

      # 配置 Let's Encrypt 证书解析器
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
      # - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    labels:
      # 为 Traefik Dashboard 配置路由器
      - traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)
      - traefik.http.routers.traefik-dashboard.entrypoints=https
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.tls=true # 为Dashboard路由器启用TLS
      # - traefik.http.routers.traefik-dashboard.tls.domains[0].main=${TRAEFIK_HOSTNAME} # 确保这里用的是 Dashboard 的域名
      # - traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt # 使用letsencrypt解析器
      - traefik.http.routers.traefik-dashboard.middlewares=auth@docker
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}

      # 配置 HTTP 到 HTTPS 的自动重定向
      - traefik.http.routers.http-to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-to-https.entrypoints=http
      - traefik.http.routers.http-to-https.middlewares=redirect-to-https@docker
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true

    ports:
      - "80:80"
      - "443:443"
      # 如果你选择仅通过443端口代理Dashboard，可以移除此行
      - "8082:8082"
    networks:
      - devops-network
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-dynamic/tls.yml:/etc/traefik/dynamic/tls.yml # 映射到容器内部
      - ./certs:/etc/certs # 映射你的证书目录

  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: pgadmin
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOSTNAME}`) # 使用服务名作为路由器名
      - traefik.http.routers.pgadmin.entrypoints=https
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
      - traefik.http.routers.pgadmin.tls=true # TLS配置应附加到具体的路由器上
      - traefik.http.routers.pgadmin.tls.certresolver=${CERT_RESOLVER}
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      # pgadmin 通常不需要直接暴露端口，Traefik会代理它
      # 除非你还需要直接从宿主机访问PgAdmin，否则这些ports可以移除
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - devops-network

  gitlab:
    image: ${GITLAB_IMAGE}
    container_name: gitlab
    restart: always
    hostname: 'gitlab-devops.com' # 确保这与你的GITLAB_HOSTNAME环境变量一致，否则会造成问题
    volumes:
      - gitlab-data:/var/opt/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-config:/etc/gitlab
    # environment:
    #   GITLAB_OMNIBUS_CONFIG: |
    #     # 将 external_url 更新为 HTTPS 且 Traefik 代理的域名
    #     external_url 'https://${GITLAB_HOSTNAME}'
    #     gitlab_rails['gitlab_shell_ssh_port'] = 2424
    #     # 确保 GitLab 知道它在 HTTPS 后面
    #     nginx['listen_port'] = ${GITLAB_PORT} # Gitlab内部Nginx监听端口
    #     nginx['listen_https'] = false
    #     nginx['proxy_set_headers'] = {
    #       "Host" => "$host",
    #       "X-Forwarded-For" => "$proxy_add_x_forwarded_for",
    #       "X-Forwarded-Proto" => "https", # 告诉Gitlab协议是HTTPS
    #       "X-Forwarded-Ssl" => "on",
    #       "X-Real-IP" => "$remote_addr"
    #     }
    ports:
      # Gitlab 通常不需要直接暴露端口，Traefik会代理它
      # 除非你还需要直接从宿主机访问Gitlab，否则这些ports可以移除
      - "${GITLAB_PORT}:${GITLAB_PORT}"
      - '2424:2424' # SSH端口，这个通常需要直接暴露
    networks:
      - devops-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOSTNAME}`) # 使用服务名作为路由器名
      - traefik.http.services.gitlab.loadbalancer.server.port=${GITLAB_PORT} # Gitlab容器内部监听的端口，应与nginx['listen_port']一致
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.gitlab.tls=true # TLS配置应附加到具体的路由器上
      - traefik.http.routers.gitlab.tls.certresolver=${CERT_RESOLVER}
      # 如果你需要SSH，且Traefik不代理SSH，则不需要为SSH配置Traefik标签
    depends_on:
      postgres:
        condition: service_healthy
    shm_size: "256m"